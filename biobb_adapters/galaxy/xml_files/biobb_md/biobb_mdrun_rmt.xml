<tool id="biobb_md_mdrun_rmt" name="Remote Mdrun" version="0.1"  >
	<description>Remote execution for the GROMACS mdrun module.</description>
	<requirements>
		<requirement type="package">biobb_common</requirement>
		<requirement type="package">paramiko</requirement>
	</requirements>
	<environment_variables>
		<environment_variable name="BIOBB_REMOTE">${__root_dir__}/tools/dev_biobb/biobb_remote</environment_variable>
		<environment_variable name="PYTHONPATH">${__root_dir__}/tools/dev_biobb/biobb_remote</environment_variable>
	</environment_variables>
	###

	<command detect_errors="aggressive"><![CDATA[
		ln -f -s ${input_tpr_path} ${__new_file_path__}/${input_tpr_path.name};
	$__root_dir__/tools/dev_biobb/biobb_adapters/biobb_adapters/remote/biobb_md/gromacs/mdrun_rmt.py
        #if $config.sele == "option1":
          --config ${config.properties}.${config.properties.ext}
        #else if $config.sele == "option2":
          --config '${config.jsonstr}'
        #end if
	--input_tpr_path ${input_tpr_path.name}
	--output_trr_path ${outname_output}.trr
	--output_gro_path ${outname_output}.gro
	--output_edr_path ${outname_output}.edr
	--output_log_path ${outname_output}.log
	--output_xtc_path ${outname_output}.xtc 
	--output_cpt_path ${outname_output}.cpt
	--output_dhdl_path ${outname_output}.dhdl
	  --local_path ${__new_file_path__}
        #if $remote_path:
	--remote_path ${remote_path}
	#end if
	  --host_config_path \$BIOBB_REMOTE/conf/${host_config_path}
	  --keys_file ${keys_file}
	  --task_data_path ${task_data_path}
	  --queue_settings ${queue_settings}
	  --queue_settings_patch ${queue_settings_patch}
        ;          
        #if $config.sele == "option1":
          rm -f ${config.properties}.${config.properties.ext};
        #end if
          rm -f ${__new_file_path__}/${input_tpr_path.name};
	  if test -f ${__new_file_path__}/${outname_output}.trr; then mv ${__new_file_path__}/${outname_output}.trr $output_trr_path; fi;
	  if test -f ${__new_file_path__}/${outname_output}.gro; then mv ${__new_file_path__}/${outname_output}.gro $output_gro_path; fi;
	  if test -f ${__new_file_path__}/${outname_output}.edr; then mv ${__new_file_path__}/${outname_output}.edr $output_edr_path; fi;
	  if test -f ${__new_file_path__}/${outname_output}.log; then mv ${__new_file_path__}/${outname_output}.log $output_log_path; fi;
	  if test -f ${__new_file_path__}/${outname_output}.xtc; then mv ${__new_file_path__}/${outname_output}.xtc $output_xtc_path; fi;
	  if test -f ${__new_file_path__}/${outname_output}.cpt; then mv ${__new_file_path__}/${outname_output}.cpt $output_cpt_path; fi;
	  if test -f ${__new_file_path__}/${outname_output}.dhdl; then mv ${__new_file_path__}/${outname_output}.dhdl $output_dhdl_path; fi;
	  ]]></command>
    <inputs> 
	 <param name="input_tpr_path" type="data" format="tpr"  optional="False" label="Input TPR file" help="Path to the portable binary run input file TPR. Format: [input].tpr"/> 
	 <param name="outname_output" type="text" value="mymdrun" optional="False" label="Prefix for output files" help="Common prefix for output files "/>
	 <param name="keys_file" type="data" optional="False" label="Credentials" help="Path to the packed remote credentials."/> 
         <param name="outname_task_data_path" type="text" value="mytask.json" label="Task Data" help="Local file to store progress of remote execution" />
	 <param name="remote_path" type="text" optional="False" value="scratch" label="Remote path" help="Remote path for execution" />
	 <param name="host_config_path" type="text" value="BSC_MN4.json" label="Host configuration file" help="Json file with configuration details" /> 
	 <param name="modules" type="text" value="biobb" label="Modules to Load" help="Modules that should be loaded on remote HPC" />
	 <param name="queue_settings" type="text" value="default" label="Queue settings (base)" help="One of the predefined queue settings" />
	 <param name="set_debug" type="boolean" value="false" label="Set Debug QOS" help="Use debug queue" />
	 <param name="queue_settings_patch" type="text" value="{}" label="Queue settings (patch)" help="Additions and modified settings (json)" />
         <param name="outname_output" type="text" value="mymdrun" optional="False" label="output files prefix" help="Common prefix for output files "/>
         <conditional name="config">
            <param name="sele" type="select" label="Take tool settings:" help="Select where tool settings are to be read from">
                <option value="option3" selected="true">use defaults</option>
                <option value="option1">from configuration file</option>
                <option value="option2">from JSON string</option>
            </param>
            <when value="option1">
                <param name="properties" type="data" format="yml,json" optional="false" label="Configuration file" help="File containing tool settings. See below for the syntax"/>
            </when>
            <when value="option2">
                <param name="jsonstr" type="text" value="{}" optional="false" label="JSON string" help="JSON string containing tool settings. See below for the syntax"/>
            </when>
            <when value="option3">
            </when>
        </conditional>
    </inputs>
    <outputs>
	    <data name="task_data_path" format="json" label="${outname_task_data_path}"/>
	    <data name="output_trr_path" format="trr" label="${outname_output}.trr"/>
	    <data name="output_gro_path" format="gro" label="${outname_output}.gro"/>
	    <data name="output_edr_path" format="edr" label="${outname_output}.edr"/>
	    <data name="output_log_path" format="log" label="${outname_output}.log"/>
	    <data name="output_xtc_path" format="xtc" label="${outname_output}.xtc"/>
	    <data name="output_cpt_path" format="cpt" label="${outname_output}.cpt"/>
	    <data name="output_dhdl_path" format="xvg" label="${outname_output}.dhdl"/>
    </outputs>
    <tests>
        <test>
        </test>
    </tests>    
    <help>
.. class:: infomark
        
Check the syntax for the tool parameters at the original library documentation: https://biobb_md.readthedocs.io/en/latest

-----

.. image:: http://mmb.irbbarcelona.org/biobb/assets/layouts/layout3/img/logo.png    
    :width: 150

**https://mmb.irbbarcelona.org/biobb**
        
.. image:: https://bioexcel.eu/wp-content/uploads/2019/08/Bioexcel_logo_no_subheading_660px.png
        :width: 150
        
**https://bioexcel.eu**
   </help>

    <citations>
        <citation type="bibtex">
            @misc{githubbiobb,
            author = {Andrio P, Bayarri, G., Hospital A, Gelpi JL},
            year = {2019-20},
            title = {biobb: BioExcel building blocks },
            publisher = {GitHub},
            journal = {GitHub repository},
            url = {https://github.com/bioexcel/biobb_md},
            }
        </citation>
        <citation type="doi">10.1038/s41597-019-0177-4</citation>
    </citations>
</tool>
